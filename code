#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

///SETTINGS
int MINTIME = 25000;    //millisecondes
int MAXTIME = 40000;    //millisecondes
int MINTOURESSAI = 40;  //nombre de tour min    P1 & P2: 60-66
int MAXTOURESSAI = 47;  //nombre de tour max    P1 & P2 : 60-66
//int NBRTOURFINAL = 44;  //nombre de tour de la final(300-350)

///CREATION DE LA STRUCTURE VOITURE
typedef struct voiture{
    int num;                //Numero de voiture
    int bestSecteur[3];     //Best temps pour chaque secteur (n° = index+1)
    int bestLap;            //Best Lap
    int stand;              //Arrèt au stand
    int out;                //Crach
}Voiture;

///CRÉATION DES PROTOTYPES
void essai(Voiture * ,int , int , int ,int );
void qualif();
void course();
void resetVoiture(Voiture [],int );
int comp(const Voiture *,const Voiture *);
void printLap(int ,int ,int , int , int , int );
void resetResult();




///FONCTION MAIN
int main()
{
    int pilotes[20] = {44,77,11,33,3,4,5,18,14,31,16,55,10,22,7,99,9,47,6,63};  //Numéros de voitures
    struct voiture v[20];	                                                    //Creation des voitures
    int voitureSize = sizeof(v)/sizeof(*v);                                     //Récuperation du nombre de pilotes
    int i,nbr;
    pid_t pid;

    resetResult();//RESET DU FICHIER

    //Allocation des numeros de voiture
    for(i=0;i<voitureSize;i++){
        v[i].num = pilotes[i];
    }


    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //ESSAI 1
    resetVoiture(v,voitureSize);
    for(i=0;i<voitureSize;i++){
        essai(&v[i],MINTIME, MAXTIME,i*v[i].num,90);
    }

    //ESSAI 2
    nbr = 2;
    resetVoiture(v,voitureSize);
    for(i=0;i<voitureSize;i++){
        essai(&v[i],MINTIME, MAXTIME,i*v[i].num/nbr ,90);
    }
    //ESSAI 3
    nbr = 3;
    resetVoiture(v,voitureSize);
    for(i=0;i<voitureSize;i++){
        essai(&v[i],MINTIME, MAXTIME,i*v[i].num/nbr ,60);
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //qsort(&v,sizeof(v)/sizeof(Voiture),sizeof(Voiture),(int (*) (const void *,const void *))&comp); // TRI

    return 0;
}




///SEANCE D'ESSAI (P1,P2,P3)
void essai(Voiture *p_voiture,int min, int max, int randint,int duree){

    srand(randint*time(NULL)%100);
    int nbrTour = rand()%(MAXTOURESSAI-MINTOURESSAI)+(MINTOURESSAI*duree/60);                            //Calcul de nombre de Tour
    int tableS1[nbrTour],tableS2[nbrTour],tableS3[nbrTour];    //Tableau de score
    int i ;                                     //Compteur
    int probaCrach = 300;
    int probaStand = 150;


    for(i=0;i<nbrTour;i++){
        if(rand()%probaCrach == 1 || p_voiture->out == 1){//Crach Test
            p_voiture->out=1;
            tableS1[i] = 0;
            tableS2[i] = 0;
            tableS3[i] = 0;
            printLap(p_voiture->num,tableS1[i],tableS2[i],tableS3[i],p_voiture->out,p_voiture->stand);
            break;
        }
        else {
            tableS1[i] = rand()%(max-min)+min;
            tableS2[i] = rand()%(max-min)+min;
            if((p_voiture->stand == 0 && rand()%100 == 1)|| rand()%probaStand == 1) {//ARRET AU STAND
                tableS3[i] = rand() % (max - min) + min + 30000;   //30 secondes d'arrèt au stand
                p_voiture->stand = 1;
            }else{
                p_voiture->stand = 0;
                tableS3[i] = rand() % (max - min) + min;
            }
            //Récupération et Allocation des meilleurs scores
            if (tableS1[i] < p_voiture->bestSecteur[0]) {
                p_voiture->bestSecteur[0] = tableS1[i];
            }
            if (tableS2[i] < p_voiture->bestSecteur[1]) {
                p_voiture->bestSecteur[1] = tableS2[i];
            }
            if (tableS3[i] < p_voiture->bestSecteur[2]) {
                p_voiture->bestSecteur[2] = tableS3[i];
            }

            //Récupération du meilleur temps de tour
            if (tableS1[i] + tableS2[i] + tableS3[i] < p_voiture->bestLap) {
                p_voiture->bestLap = tableS1[i] + tableS2[i] + tableS3[i];
            }
        }

        printLap(p_voiture->num,tableS1[i],tableS2[i],tableS3[i],p_voiture->out,p_voiture->stand);
    }


    /*
    //Affiche des scores de la course
    for(i=0;i<sizeof(tableS1)/sizeof(*tableS1);i++){
        printf("\n%d\t Tour n°%d\t\t%.4f\t\t%.4f\t\t%.4f\t\t%d ",p_voiture->num,i+1,(float)tableS1[i]/1000,(float)tableS2[i]/1000,(float)tableS3[i]/1000,p_voiture->stand);
    }
    */

}


///SEANCE DE QUALIFICATION
void qualif(){

}

///COURSE FINALE
void course(){

}


void resetVoiture(Voiture v[],int size){
    int i,j;

    for(i=0;i<size;i++){
        for(j=0;j<3;j++){
            v->bestSecteur[j]=0;
        }
        v[i].bestLap = 0;
        v[i].out = 0;
        v[i].stand = 0;
    }

}



///FONCTION DE TRI DES SCORES
int comp(const Voiture *v1,const Voiture *v2){
    if(v1->bestLap<v2->bestLap){
        return -1;
    }
    else if(v1->bestLap>v2->bestLap){
        return 1;
    }else{
        return 0;
    }
}

///AFFICHAGE DES RESULTATS DANS UN FICHIER
void printLap(int numCar,int s1,int s2,int s3,  int out , int stand){
    FILE* f = fopen("result","a");
    if(out==1){
        fprintf(f,"%d\t|\t%.4f\t\t%.4f\t\t%.4f\t\t%.4f\t\t%d\t\n", numCar,(float)s1/1000,(float)s2/1000,(float)s3/1000,(float)(s1+s2+s3)/1000,out);
    }else if(stand == 1){
        fprintf(f,"%d\t|\t%.4f\t%.4f\t%.4f\t%.4f\t\t%d\n", numCar,(float)s1/1000,(float)s2/1000,(float)s3/1000,(float)(s1+s2+s3)/1000,stand);
    }else{
        fprintf(f,"%d\t|\t%.4f\t%.4f\t%.4f\t%.4f\t\t\n", numCar,(float)s1/1000,(float)s2/1000,(float)s3/1000,(float)(s1+s2+s3)/1000);

    }
    fclose(f);
}

void resetResult(){
    FILE* f = fopen("result","w");
    fprintf(f,"");
}
